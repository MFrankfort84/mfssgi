
using UnityEngine;

namespace MF.SSGI.Settings {

    [CreateAssetMenu(fileName = "SSGI Lighting settings", menuName = "MF.SSGI/Lighting Settings")]
    public class SSGILightingSettings : ScriptableObject {
        [Space]
        [Space]
        [Header("Light cast: Spotlight-like behaviour")]
        [Tooltip("Influences the way it casts light much like the 'Inner / Outer Spot Angle' does of a Spotlight.\n" +
            "NOTE: Negate values bleeds light 'behind' the object - usefull to remove sharp cutoffs but keep creases lit")]
        [Range(-1f, 1f)] public float LightCastDotMin = 0.1f;
        [Tooltip("Influences the way it casts light much like the 'Inner / Outer Spot Angle' does of a Spotlight.")]
        [Range(-1f, 1f)] public float LightCastDotMax = 1f;

        [Header("GI Light receive: Lambert-shading behaviour")]
        [Tooltip("Above 0 is less realistic, but boosts/sharpens the light received. Min/Max very close to eachother looks like toon-shading")]
        [Range(-1f, 1f)] public float LightReceiveDotMin = 0.3f;
        [Tooltip("Below 1 is less realistic, but boosts/sharpens the light received. Min/Max very close to eachother looks like toon-shading")]
        [Range(-1f, 1f)] public float LightReceiveDotMax = 0.8f;

        [Space]
        [Space]
        [Header("Encoded light direction: 2x Lambert mixed additively")]
        [Tooltip("Below 1 is less realistic, but boosts/sharpens the light received. Min/Max very close to eachother looks like toon-shading")]
        [Range(-1f, 1f)] public float LightDirectionDotMinSoft = -0.25f;
        [Tooltip("Below 1 is less realistic, but boosts/sharpens the light received. Min/Max very close to eachother looks like toon-shading")]
        [Range(-1f, 1f)] public float LightDirectionDotMaxSoft = 1f;
        [Tooltip("The intensity with which its added to Soft+Hard")]
        [Range(0f, 1f)] public float LightDirectionIntensitySoft = 0.5f;
        [Space]
        [Tooltip("Below 1 is less realistic, but boosts/sharpens the light received. Min/Max very close to eachother looks like toon-shading")]
        [Range(0f, 1f)] public float LightDirectionDotMinHard = 0.65f;
        [Tooltip("Below 1 is less realistic, but boosts/sharpens the light received. Min/Max very close to eachother looks like toon-shading")]
        [Range(0f, 1f)] public float LightDirectionDotMaxHard = 1f;
        [Tooltip("The intensity with which its added to Soft+Hard")]
        [Range(0f, 2f)] public float LightDirectionIntensityHard = 1.25f;

        [Space]
        [Space]
        [Range(0f, 1f)] public float ShadowsLambertInfluence = 0.25f;

        [Space]
        [Header("Energy")]
        [Tooltip("Limits the maximum energy generated by light-falloff calculations. Due to the 'Light Faloff Exponential' values can get super high in close proximity, causing flickering")]
        public float MaxLightAttenuation = 10;
        [Tooltip("Limits the maximum energy foreach pixel contributing to the final result. Lower this value when reflections/edges start to twinkle")]
        public float MaxInputEnergy = 5f;
        [Tooltip("Limits the maximum energy of the final composit. If you expect your SSGI to bloom more, you can increase this value")]
        public float MaxOutputEnergy = 50f;
        //[Tooltip("Boosts light from surfaces perpendicular to the view-direction as they represent more surface area")]
        //[Range(0, 5f)] public float PerpendicularViewDirBoost = 2f;
        [Tooltip("When an object moves away from the camera, its screen-space surface area decreases. But that doesn't mean it should emit less light.\n" +
            "A value of 1 is the default frustum-space-over-distance, higher values boosts this effect")]
        [Range(0f, 2f)] public float DistanceEnergyBoost = 0.25f;



        [Header("Composit (shared)")]
        [Tooltip("Mixes the Albedo (in deferred GBuffer, in forward Reconstructed) with white, resulting in more color 'glare' to your liking")]
        [Range(0f, 1f)] public float MinimumAlbedoWhiteness = 0.25f;

        [Space]
        [Header("Composit: DEFERRED")]
        [ColorUsage(showAlpha: false, hdr: true)] public Color SpecularTint = new Color(0.2f, 0.24f, 0.3f);

        [Space]
        [Header("Composit: FORWARD")]
        [Range(0f, 1f)] public float AlbedoDetailBoost = 0.25f;
        [Range(1, 6)] public int AlbedoDetailBoostMipLevle = 2;
        [Tooltip(
            "Use 'Debug Albedo' option over at the Render-feature to test" +
            "Sice Forward does not have a Albedo GBuffer pass (no lighting, no shadows) SSGI can only use the final image as a resource for compositing\n." +
            "If an object receives shadow or is darkly shaded, the fog-color is the most prominent color present creating an unnatural tinted shade. Use this slider to counter that effect")]
        [Range(0f, 2f)] public float AlbedoSubtractFogColor = 0.1f;
        [Tooltip(
            "Use 'Debug Albedo' option over at the Render-feature to test" +
            "Sice Forward does not have a Albedo GBuffer pass (no lighting, no shadows) SSGI can only use the final image as a resource for compositing\n." +
            "By subtracting the sky-color we can make the albedo in Forward-mode much more natural looking")]
        [Range(0f, 2f)] public float AlbedoSubtractSkyColor = 1f;

        [Range(0f, 1f)] public float AlbedoContrast = 0.5f;
    }
}